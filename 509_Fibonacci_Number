'''
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30
'''

import unittest
from typing import List

class Solution:
    def fib(self, n: int) -> int:
        # Check for negative input
        if n < 0:
            raise ValueError("n must be a non-negative integer")
        # Base cases
        if n == 0:
            return 0
        elif n == 1:
            return 1
        
        # Iterative approach to calculate Fibonacci number
        # O(n) time complexity
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Testing:

class TestFibonacciNumber(unittest.TestCase):
    def setUp(self):
        self.solution = Solution()

    def test_fib_0(self):
        self.assertEqual(self.solution.fib(0), 0)

    def test_fib_1(self):
        self.assertEqual(self.solution.fib(1), 1)

    def test_fib_2(self):
        self.assertEqual(self.solution.fib(2), 1)

    def test_fib_3(self):
        self.assertEqual(self.solution.fib(3), 2)

    def test_fib_4(self):
        self.assertEqual(self.solution.fib(4), 3)

    def test_fib_5(self):
        self.assertEqual(self.solution.fib(5), 5)

    def test_fib_30(self):
        self.assertEqual(self.solution.fib(30), 832040)

    def test_fib_large(self):
        self.assertEqual(self.solution.fib(50), 12586269025)

    def test_fib_negative(self):
        with self.assertRaises(ValueError):
            self.solution.fib(-1)

if __name__ == "__main__":
    unittest.main(exit=False)