'''
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 2^31 - 1
0 <= amount <= 10^4
'''

import unittest
from typing import List

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0  # Base case: 0 coins needed to make amount 0

        for coin in coins:
            for x in range(coin, amount + 1):
                dp[x] = min(dp[x], dp[x - coin] + 1)

        return dp[amount] if dp[amount] != float('inf') else -1
    
# Testing:

class TestCoinChange(unittest.TestCase):
    def setUp(self):
        self.solution = Solution()

    def test_example_1(self):
        self.assertEqual(self.solution.coinChange([1, 2, 5], 11), 3)

    def test_example_2(self):
        self.assertEqual(self.solution.coinChange([2], 3), -1)

    def test_example_3(self):
        self.assertEqual(self.solution.coinChange([1], 0), 0)

    def test_no_coins_needed(self):
        self.assertEqual(self.solution.coinChange([1, 2, 5], 0), 0)

    def test_large_amount(self):
        self.assertEqual(self.solution.coinChange([1, 2, 5], 10000), 2000)

    def test_no_solution(self):
        self.assertEqual(self.solution.coinChange([2, 5], 3), -1)

    def test_single_coin(self):
        self.assertEqual(self.solution.coinChange([3], 9), 3)

    def test_multiple_coins(self):
        self.assertEqual(self.solution.coinChange([1, 3, 4], 6), 2)

    def test_large_coins(self):
        self.assertEqual(self.solution.coinChange([10, 20, 50], 30), 2)

    def test_large_input(self):
        self.assertEqual(self.solution.coinChange([1, 2, 5, 10, 20, 50], 10000), 200)

if __name__ == "__main__":
    unittest.main(exit=False)