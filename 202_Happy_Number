'''
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 2^31 - 1



Solution:
'''

import unittest

class Solution:
    def isHappy(self, n: int) -> bool:
        seen = set()
        current = str(n)

        while current not in seen:
            seen.add(current)
            Sum = 0
            for digit in current:
                digit = int(digit)
                Sum += digit * digit

            if Sum == 1: return True
            current = str(Sum)

        return False


# Testing:

class TestIsHappy(unittest.TestCase):
    def setUp(self):
        self.sol = Solution()

    def test_happy_numbers(self):
        self.assertTrue(self.sol.isHappy(1))      # 1 is happy
        self.assertTrue(self.sol.isHappy(19))     # 19 is happy
        self.assertTrue(self.sol.isHappy(7))      # 7 is happy
        self.assertTrue(self.sol.isHappy(10))     # 10 is happy

    def test_unhappy_numbers(self):
        self.assertFalse(self.sol.isHappy(2))     # 2 is not happy
        self.assertFalse(self.sol.isHappy(4))     # 4 is not happy
        self.assertFalse(self.sol.isHappy(20))    # 20 is not happy
        self.assertFalse(self.sol.isHappy(3))     # 3 is not happy

    def test_large_happy_number(self):
        self.assertTrue(self.sol.isHappy(100000)) # 100000 is happy

    def test_large_unhappy_number(self):
        self.assertFalse(self.sol.isHappy(9999999)) # 9999999 is not happy

if __name__ == "__main__":
    unittest.main()
        